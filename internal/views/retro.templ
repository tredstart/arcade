package views

import "arcade/internal/models"
import "fmt"

func getCommentURL(id string) string {
	return fmt.Sprintf("/record/%s/comments", id)
}

func getCommentCountURL(id string) string {
    return fmt.Sprintf("/count-comments/%s", id)
}

templ RetroItem(record models.Record) {
	<div class="column-item" id="comments-block">
		<div class="column-item-content">
			<p>{ record.Content }</p>
		</div>
		<div class="column-item-title">
			<p>{ record.Author }</p>
			<div class="column-item-title-reactions">
				// ACTION HERE
				<div class="likes">
					<i class="fa fa-thumbs-up active"></i>
					<p>{ fmt.Sprint(record.Likes) } </p>
				</div>
				// ACTION HERE
				<div>
					<i class="fa fa-comment" hx-get={ getCommentURL(record.Id.String()) } hx-trigger="click" hx-target="#comments-block" hx-swap="beforeend" ></i>
					<p hx-get={ getCommentCountURL(record.Id.String()) } hx-trigger="load"></p>
				</div>
			</div>
		</div>
	</div>
}

script autoresize() {
    const tx = document.getElementsByTagName("textarea");
    for (let i = 0; i < tx.length; i++) {
      tx[i].setAttribute("style", "height:" + (tx[i].scrollHeight) + "px;overflow-y:hidden;");
      tx[i].addEventListener("input", OnInput, false);
    }

    function OnInput(e) {
      this.style.height = 0;
      this.style.height = (this.scrollHeight) + "px";
      e.preventDefault();
    }
}

func getVisibilityLink(retro_id string) string {
	return fmt.Sprintf("/retro/%s/change-visibility", retro_id)
}

templ RetroPage(records map[string][]models.Record, c_ids map[string]string, retro_title string, retro models.Retro, authorized bool) {
	@head("Retro time")
	<body>
		<div class="default-layout">
			@aside()
			<div class="default-container">
				<div class="default-container-title">
					<h6>{ retro_title }</h6>
					if authorized {
						if retro.Visible {
							<button class="primary-button" hx-vals='{"visible": "true"}' hx-post={ getVisibilityLink(retro.Id.String()) } hx-swap="outerHTML" hx-target="body">
								<i class="fa fa-lock"></i> Make private
							</button>
						} else {
							<button class="primary-button" hx-vals='{"visible": "false"}' hx-post={ getVisibilityLink(retro.Id.String()) } hx-swap="outerHTML" hx-target="body">
								<i class="fa fa-unlock"></i> Make visible
							</button>
						}
					}
				</div>
				<div class="column-container-content">
					for category := range records {
						<div class="column">
							<div class="column-title">
								<p><strong>{ category }</strong></p>
							</div>
							<div class="comments" id={ c_ids[category] }>
								<form class="primary-form" hx-post="" hx-swap="beforeend" hx-target={ "#" + c_ids[category] }>
									<input required type="hidden" name="category" value={ category }/>
									<textarea required placeholder="Please enter to leave a comment" type="text" name="content"></textarea>
									<button class="primary-button">Post</button>
								</form>
								for _, record := range records[category] {
									@RetroItem(record)
								}
							</div>
						</div>
					}
				</div>
			</div>
		</div>
		@autoresize()
	</body>
}
